<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="log.base" value="./logs" />

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 文件日志格式-->
    <property name="patternAsyn" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%C.java:%L] - %msg%n" />

    <!--控制台日志， 控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%msg：日志消息，%n是换行符-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
            <outputPatternAsHeader>false</outputPatternAsHeader>
        </encoder>
    </appender>

    <appender name="log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/log/log.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log.base}/log/log.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <!--日志文件最大的大小-->
            <maxFileSize>500MB</maxFileSize>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${patternAsyn}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/error/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log.base}/error/error.%d{yyyyMMdd}.%i.log</FileNamePattern>
            <!--日志文件最大的大小-->
            <maxFileSize>500MB</maxFileSize>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${patternAsyn}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--异步记录日志，目前报错先记录不启用-->
    <!--<appender name="log_async" class="reactor.logback.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>&lt;!&ndash; 不丢弃日志，默认80%时会丢弃TRACE,DEBUG,debug级别日志 &ndash;&gt;
        <queueSize>10240000</queueSize>&lt;!&ndash; 队列深度，默认256 &ndash;&gt;
        <includeCallerData>false</includeCallerData>&lt;!&ndash; 是否包含调用者数据 &ndash;&gt;
        <appender-ref ref="log" />
    </appender>

    <appender name="error_async" class="reactor.logback.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>102400</queueSize>
        <includeCallerData>false</includeCallerData>
        <appender-ref ref="error" />
    </appender>-->

    <!--文件日志， 按照每天生成日志文件 -->
    <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;日志文件输出的文件名&ndash;&gt;
            <FileNamePattern>${log.base}/matterDays.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            &lt;!&ndash;日志文件保留天数&ndash;&gt;
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        &lt;!&ndash;日志文件最大的大小&ndash;&gt;
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>-->

    <!--myibatis log configure-->
    <logger name="com.apache.ibatis" level="info"/>
    <logger name="com.ibatis" level="info" />
    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="info" />
    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="info" />
    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="info" />
    <logger name="java.sql.Connection" level="info" />
    <logger name="java.sql.Statement" level="info" />
    <logger name="java.sql.PreparedStatement" level="info" />

    <logger name="com.wlcb.ylth.module.dbs.dao" level="DEBUG" additivity="false" />

    <logger name="com.wlcb" level="debug" >
        <appender-ref ref="log" />
        <appender-ref ref="stdout" />
        <appender-ref ref="error" />
    </logger>

    <!-- 日志输出级别 -->
    <root level="DEBUG">
        <appender-ref ref="log" />
        <appender-ref ref="error" />
        <appender-ref ref="stdout" />
    </root>
</configuration>